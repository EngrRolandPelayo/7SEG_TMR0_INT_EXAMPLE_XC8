

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Fri Oct 02 20:14:12 2020

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	maintext,global,class=CODE,split=1,delta=2
     9                           	psect	text1,local,class=CODE,merge=1,delta=2
    10                           	psect	text2,local,class=CODE,merge=1,delta=2
    11                           	psect	text3,local,class=CODE,merge=1,delta=2
    12                           	psect	text4,local,class=CODE,merge=1,delta=2
    13                           	psect	intentry,global,class=CODE,delta=2
    14                           	psect	text5,local,class=CODE,merge=1,delta=2
    15                           	dabs	1,0x7E,2
    16  0000                     
    17                           ; Version 2.10
    18                           ; Generated 31/07/2019 GMT
    19                           ; 
    20                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    21                           ; All rights reserved.
    22                           ; 
    23                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    24                           ; 
    25                           ; Redistribution and use in source and binary forms, with or without modification, are
    26                           ; permitted provided that the following conditions are met:
    27                           ; 
    28                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    29                           ;        conditions and the following disclaimer.
    30                           ; 
    31                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    32                           ;        of conditions and the following disclaimer in the documentation and/or other
    33                           ;        materials provided with the distribution.
    34                           ; 
    35                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    36                           ;        software without specific prior written permission.
    37                           ; 
    38                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    39                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    40                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    41                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    42                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    43                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    44                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    45                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    46                           ; 
    47                           ; 
    48                           ; Code-generator required, PIC16F877A Definitions
    49                           ; 
    50                           ; SFR Addresses
    51  0000                     	;# 
    52  0001                     	;# 
    53  0002                     	;# 
    54  0003                     	;# 
    55  0004                     	;# 
    56  0005                     	;# 
    57  0006                     	;# 
    58  0007                     	;# 
    59  0008                     	;# 
    60  0009                     	;# 
    61  000A                     	;# 
    62  000B                     	;# 
    63  000C                     	;# 
    64  000D                     	;# 
    65  000E                     	;# 
    66  000E                     	;# 
    67  000F                     	;# 
    68  0010                     	;# 
    69  0011                     	;# 
    70  0012                     	;# 
    71  0013                     	;# 
    72  0014                     	;# 
    73  0015                     	;# 
    74  0015                     	;# 
    75  0016                     	;# 
    76  0017                     	;# 
    77  0018                     	;# 
    78  0019                     	;# 
    79  001A                     	;# 
    80  001B                     	;# 
    81  001B                     	;# 
    82  001C                     	;# 
    83  001D                     	;# 
    84  001E                     	;# 
    85  001F                     	;# 
    86  0081                     	;# 
    87  0085                     	;# 
    88  0086                     	;# 
    89  0087                     	;# 
    90  0088                     	;# 
    91  0089                     	;# 
    92  008C                     	;# 
    93  008D                     	;# 
    94  008E                     	;# 
    95  0091                     	;# 
    96  0092                     	;# 
    97  0093                     	;# 
    98  0094                     	;# 
    99  0098                     	;# 
   100  0099                     	;# 
   101  009C                     	;# 
   102  009D                     	;# 
   103  009E                     	;# 
   104  009F                     	;# 
   105  010C                     	;# 
   106  010D                     	;# 
   107  010E                     	;# 
   108  010F                     	;# 
   109  018C                     	;# 
   110  018D                     	;# 
   111  0000                     	;# 
   112  0001                     	;# 
   113  0002                     	;# 
   114  0003                     	;# 
   115  0004                     	;# 
   116  0005                     	;# 
   117  0006                     	;# 
   118  0007                     	;# 
   119  0008                     	;# 
   120  0009                     	;# 
   121  000A                     	;# 
   122  000B                     	;# 
   123  000C                     	;# 
   124  000D                     	;# 
   125  000E                     	;# 
   126  000E                     	;# 
   127  000F                     	;# 
   128  0010                     	;# 
   129  0011                     	;# 
   130  0012                     	;# 
   131  0013                     	;# 
   132  0014                     	;# 
   133  0015                     	;# 
   134  0015                     	;# 
   135  0016                     	;# 
   136  0017                     	;# 
   137  0018                     	;# 
   138  0019                     	;# 
   139  001A                     	;# 
   140  001B                     	;# 
   141  001B                     	;# 
   142  001C                     	;# 
   143  001D                     	;# 
   144  001E                     	;# 
   145  001F                     	;# 
   146  0081                     	;# 
   147  0085                     	;# 
   148  0086                     	;# 
   149  0087                     	;# 
   150  0088                     	;# 
   151  0089                     	;# 
   152  008C                     	;# 
   153  008D                     	;# 
   154  008E                     	;# 
   155  0091                     	;# 
   156  0092                     	;# 
   157  0093                     	;# 
   158  0094                     	;# 
   159  0098                     	;# 
   160  0099                     	;# 
   161  009C                     	;# 
   162  009D                     	;# 
   163  009E                     	;# 
   164  009F                     	;# 
   165  010C                     	;# 
   166  010D                     	;# 
   167  010E                     	;# 
   168  010F                     	;# 
   169  018C                     	;# 
   170  018D                     	;# 
   171  0008                     _PORTD	set	8
   172  0039                     _RC1	set	57
   173  0038                     _RC0	set	56
   174  005A                     _T0IF	set	90
   175  0059                     _INTF	set	89
   176  005D                     _T0IE	set	93
   177  005C                     _INTE	set	92
   178  005F                     _GIE	set	95
   179  0088                     _TRISD	set	136
   180  0081                     _OPTION_REG	set	129
   181  0439                     _TRISC1	set	1081
   182  0438                     _TRISC0	set	1080
   183  0430                     _TRISB0	set	1072
   184                           
   185                           	psect	cinit
   186  0015                     start_initialization:	
   187                           ; #config settings
   188                           
   189  0015                     __initialization:	
   190                           
   191                           ; Clear objects allocated to COMMON
   192  0015  01F6               	clrf	__pbssCOMMON& (0+127)
   193  0016  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
   194  0017  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
   195  0018  01F9               	clrf	(__pbssCOMMON+3)& (0+127)
   196  0019                     end_of_initialization:	
   197                           ;End of C runtime variable initialization code
   198                           
   199  0019                     __end_of__initialization:	
   200  0019  0183               	clrf	3
   201  001A  120A  118A  28C4   	ljmp	_main	;jump to C main() function
   202                           
   203                           	psect	bssCOMMON
   204  0076                     __pbssCOMMON:	
   205  0076                     _tens:	
   206  0076                     	ds	2
   207  0078                     _ones:	
   208  0078                     	ds	2
   209                           
   210                           	psect	cstackCOMMON
   211  0070                     __pcstackCOMMON:	
   212  0070                     ?_enableExtInterrupt:	
   213  0070                     ?_setupPorts:	
   214                           ; 1 bytes @ 0x0
   215                           
   216  0070                     ?_numberToSegment:	
   217                           ; 1 bytes @ 0x0
   218                           
   219  0070                     ?_main:	
   220                           ; 1 bytes @ 0x0
   221                           
   222  0070                     ?_ISR:	
   223                           ; 1 bytes @ 0x0
   224                           
   225  0070                     numberToSegment@number:	
   226                           ; 1 bytes @ 0x0
   227                           
   228                           
   229                           ; 2 bytes @ 0x0
   230  0070                     	ds	2
   231  0072                     ??_numberToSegment:	
   232  0072                     ??_ISR:	
   233                           ; 1 bytes @ 0x2
   234                           
   235                           
   236                           ; 1 bytes @ 0x2
   237  0072                     	ds	4
   238                           
   239                           	psect	cstackBANK0
   240  0020                     __pcstackBANK0:	
   241  0020                     ??_enableExtInterrupt:	
   242  0020                     ?_enableTmrInterrupt:	
   243                           ; 1 bytes @ 0x0
   244                           
   245  0020                     ??_setupPorts:	
   246                           ; 1 bytes @ 0x0
   247                           
   248  0020                     enableTmrInterrupt@prescale:	
   249                           ; 1 bytes @ 0x0
   250                           
   251                           
   252                           ; 2 bytes @ 0x0
   253  0020                     	ds	2
   254  0022                     ??_enableTmrInterrupt:	
   255  0022                     enableTmrInterrupt@mask:	
   256                           ; 1 bytes @ 0x2
   257                           
   258                           
   259                           ; 2 bytes @ 0x2
   260  0022                     	ds	2
   261  0024                     ??_main:	
   262                           
   263                           	psect	maintext
   264  00C4                     __pmaintext:	
   265                           ; 1 bytes @ 0x4
   266 ;;
   267 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   268 ;;
   269 ;; *************** function _main *****************
   270 ;; Defined at:
   271 ;;		line 24 in file "main.c"
   272 ;; Parameters:    Size  Location     Type
   273 ;;		None
   274 ;; Auto vars:     Size  Location     Type
   275 ;;		None
   276 ;; Return value:  Size  Location     Type
   277 ;;                  1    wreg      void 
   278 ;; Registers used:
   279 ;;		wreg, status,2, status,0, pclath, cstack
   280 ;; Tracked objects:
   281 ;;		On entry : B00/0
   282 ;;		On exit  : 0/0
   283 ;;		Unchanged: 0/0
   284 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   285 ;;      Params:         0       0       0       0       0
   286 ;;      Locals:         0       0       0       0       0
   287 ;;      Temps:          0       0       0       0       0
   288 ;;      Totals:         0       0       0       0       0
   289 ;;Total ram usage:        0 bytes
   290 ;; Hardware stack levels required when called:    3
   291 ;; This function calls:
   292 ;;		_enableExtInterrupt
   293 ;;		_enableTmrInterrupt
   294 ;;		_setupPorts
   295 ;; This function is called by:
   296 ;;		Startup code after reset
   297 ;; This function uses a non-reentrant model
   298 ;;
   299                           
   300                           
   301                           ;psect for function _main
   302  00C4                     _main:	
   303  00C4                     l976:	
   304                           ;incstack = 0
   305                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   306                           
   307                           
   308                           ;main.c: 25:     enableExtInterrupt();
   309  00C4  120A  118A  20F8  120A  118A  	fcall	_enableExtInterrupt
   310  00C9                     l978:	
   311                           
   312                           ;main.c: 26:     enableTmrInterrupt(6);
   313  00C9  3006               	movlw	6
   314  00CA  1283               	bcf	3,5	;RP0=0, select bank0
   315  00CB  1303               	bcf	3,6	;RP1=0, select bank0
   316  00CC  00A0               	movwf	enableTmrInterrupt@prescale
   317  00CD  3000               	movlw	0
   318  00CE  00A1               	movwf	enableTmrInterrupt@prescale+1
   319  00CF  120A  118A  20DD  120A  118A  	fcall	_enableTmrInterrupt
   320  00D4                     l980:	
   321                           
   322                           ;main.c: 27:     setupPorts();
   323  00D4  120A  118A  20F1  120A  118A  	fcall	_setupPorts
   324  00D9                     l43:	
   325                           ;main.c: 28:     while(1){
   326                           
   327  00D9                     l44:	
   328                           ;main.c: 30:     }
   329                           
   330  00D9  28D9               	goto	l43
   331  00DA  120A  118A  2812   	ljmp	start
   332  00DD                     __end_of_main:	
   333                           
   334                           	psect	text1
   335  00F1                     __ptext1:	
   336 ;; *************** function _setupPorts *****************
   337 ;; Defined at:
   338 ;;		line 46 in file "main.c"
   339 ;; Parameters:    Size  Location     Type
   340 ;;		None
   341 ;; Auto vars:     Size  Location     Type
   342 ;;		None
   343 ;; Return value:  Size  Location     Type
   344 ;;                  1    wreg      void 
   345 ;; Registers used:
   346 ;;		status,2
   347 ;; Tracked objects:
   348 ;;		On entry : 0/0
   349 ;;		On exit  : 0/0
   350 ;;		Unchanged: 0/0
   351 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   352 ;;      Params:         0       0       0       0       0
   353 ;;      Locals:         0       0       0       0       0
   354 ;;      Temps:          0       0       0       0       0
   355 ;;      Totals:         0       0       0       0       0
   356 ;;Total ram usage:        0 bytes
   357 ;; Hardware stack levels used:    1
   358 ;; Hardware stack levels required when called:    2
   359 ;; This function calls:
   360 ;;		Nothing
   361 ;; This function is called by:
   362 ;;		_main
   363 ;; This function uses a non-reentrant model
   364 ;;
   365                           
   366                           
   367                           ;psect for function _setupPorts
   368  00F1                     _setupPorts:	
   369  00F1                     l972:	
   370                           ;incstack = 0
   371                           ; Regs used in _setupPorts: [status,2]
   372                           
   373                           
   374                           ;main.c: 47:     TRISB0 = 1;
   375  00F1  1683               	bsf	3,5	;RP0=1, select bank1
   376  00F2  1303               	bcf	3,6	;RP1=0, select bank1
   377  00F3  1406               	bsf	6,0	;volatile
   378                           
   379                           ;main.c: 48:     TRISC0 = 0;
   380  00F4  1007               	bcf	7,0	;volatile
   381                           
   382                           ;main.c: 49:     TRISC1 = 0;
   383  00F5  1087               	bcf	7,1	;volatile
   384  00F6                     l974:	
   385                           
   386                           ;main.c: 50:     TRISD = 0;
   387  00F6  0188               	clrf	8	;volatile
   388  00F7                     l55:	
   389  00F7  0008               	return
   390  00F8                     __end_of_setupPorts:	
   391                           
   392                           	psect	text2
   393  00DD                     __ptext2:	
   394 ;; *************** function _enableTmrInterrupt *****************
   395 ;; Defined at:
   396 ;;		line 39 in file "main.c"
   397 ;; Parameters:    Size  Location     Type
   398 ;;  prescale        2    0[BANK0 ] int 
   399 ;; Auto vars:     Size  Location     Type
   400 ;;  mask            2    2[BANK0 ] int 
   401 ;; Return value:  Size  Location     Type
   402 ;;                  1    wreg      void 
   403 ;; Registers used:
   404 ;;		wreg, status,2, status,0
   405 ;; Tracked objects:
   406 ;;		On entry : 0/0
   407 ;;		On exit  : 0/0
   408 ;;		Unchanged: 0/0
   409 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   410 ;;      Params:         0       2       0       0       0
   411 ;;      Locals:         0       2       0       0       0
   412 ;;      Temps:          0       0       0       0       0
   413 ;;      Totals:         0       4       0       0       0
   414 ;;Total ram usage:        4 bytes
   415 ;; Hardware stack levels used:    1
   416 ;; Hardware stack levels required when called:    2
   417 ;; This function calls:
   418 ;;		Nothing
   419 ;; This function is called by:
   420 ;;		_main
   421 ;; This function uses a non-reentrant model
   422 ;;
   423                           
   424                           
   425                           ;psect for function _enableTmrInterrupt
   426  00DD                     _enableTmrInterrupt:	
   427  00DD                     l966:	
   428                           ;incstack = 0
   429                           ; Regs used in _enableTmrInterrupt: [wreg+status,2+status,0]
   430                           
   431                           
   432                           ;main.c: 40:     GIE = 1;
   433  00DD  178B               	bsf	11,7	;volatile
   434                           
   435                           ;main.c: 41:     T0IE = 1;
   436  00DE  168B               	bsf	11,5	;volatile
   437  00DF                     l968:	
   438                           
   439                           ;main.c: 42:     int mask = 0x07 & prescale;
   440  00DF  3007               	movlw	7
   441  00E0  1283               	bcf	3,5	;RP0=0, select bank0
   442  00E1  1303               	bcf	3,6	;RP1=0, select bank0
   443  00E2  0520               	andwf	enableTmrInterrupt@prescale,w
   444  00E3  00A2               	movwf	enableTmrInterrupt@mask
   445  00E4  3000               	movlw	0
   446  00E5  0521               	andwf	enableTmrInterrupt@prescale+1,w
   447  00E6  00A3               	movwf	enableTmrInterrupt@mask+1
   448  00E7                     l970:	
   449                           
   450                           ;main.c: 43:     OPTION_REG = OPTION_REG & mask;
   451  00E7  1683               	bsf	3,5	;RP0=1, select bank1
   452  00E8  1303               	bcf	3,6	;RP1=0, select bank1
   453  00E9  0801               	movf	1,w	;volatile
   454  00EA  1283               	bcf	3,5	;RP0=0, select bank0
   455  00EB  1303               	bcf	3,6	;RP1=0, select bank0
   456  00EC  0522               	andwf	enableTmrInterrupt@mask,w
   457  00ED  1683               	bsf	3,5	;RP0=1, select bank1
   458  00EE  1303               	bcf	3,6	;RP1=0, select bank1
   459  00EF  0081               	movwf	1	;volatile
   460  00F0                     l52:	
   461  00F0  0008               	return
   462  00F1                     __end_of_enableTmrInterrupt:	
   463                           
   464                           	psect	text3
   465  00F8                     __ptext3:	
   466 ;; *************** function _enableExtInterrupt *****************
   467 ;; Defined at:
   468 ;;		line 34 in file "main.c"
   469 ;; Parameters:    Size  Location     Type
   470 ;;		None
   471 ;; Auto vars:     Size  Location     Type
   472 ;;		None
   473 ;; Return value:  Size  Location     Type
   474 ;;                  1    wreg      void 
   475 ;; Registers used:
   476 ;;		None
   477 ;; Tracked objects:
   478 ;;		On entry : 0/0
   479 ;;		On exit  : 0/0
   480 ;;		Unchanged: 0/0
   481 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   482 ;;      Params:         0       0       0       0       0
   483 ;;      Locals:         0       0       0       0       0
   484 ;;      Temps:          0       0       0       0       0
   485 ;;      Totals:         0       0       0       0       0
   486 ;;Total ram usage:        0 bytes
   487 ;; Hardware stack levels used:    1
   488 ;; Hardware stack levels required when called:    2
   489 ;; This function calls:
   490 ;;		Nothing
   491 ;; This function is called by:
   492 ;;		_main
   493 ;; This function uses a non-reentrant model
   494 ;;
   495                           
   496                           
   497                           ;psect for function _enableExtInterrupt
   498  00F8                     _enableExtInterrupt:	
   499  00F8                     l964:	
   500                           ;incstack = 0
   501                           ; Regs used in _enableExtInterrupt: []
   502                           
   503                           
   504                           ;main.c: 35:     GIE = 1;
   505  00F8  178B               	bsf	11,7	;volatile
   506                           
   507                           ;main.c: 36:     INTE = 1;
   508  00F9  160B               	bsf	11,4	;volatile
   509  00FA                     l49:	
   510  00FA  0008               	return
   511  00FB                     __end_of_enableExtInterrupt:	
   512                           
   513                           	psect	text4
   514  001D                     __ptext4:	
   515 ;; *************** function _ISR *****************
   516 ;; Defined at:
   517 ;;		line 54 in file "main.c"
   518 ;; Parameters:    Size  Location     Type
   519 ;;		None
   520 ;; Auto vars:     Size  Location     Type
   521 ;;		None
   522 ;; Return value:  Size  Location     Type
   523 ;;                  1    wreg      void 
   524 ;; Registers used:
   525 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   526 ;; Tracked objects:
   527 ;;		On entry : 0/0
   528 ;;		On exit  : 0/0
   529 ;;		Unchanged: 0/0
   530 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   531 ;;      Params:         0       0       0       0       0
   532 ;;      Locals:         0       0       0       0       0
   533 ;;      Temps:          4       0       0       0       0
   534 ;;      Totals:         4       0       0       0       0
   535 ;;Total ram usage:        4 bytes
   536 ;; Hardware stack levels used:    1
   537 ;; Hardware stack levels required when called:    1
   538 ;; This function calls:
   539 ;;		_numberToSegment
   540 ;; This function is called by:
   541 ;;		Interrupt level 1
   542 ;; This function uses a non-reentrant model
   543 ;;
   544                           
   545                           
   546                           ;psect for function _ISR
   547  001D                     _ISR:	
   548  001D                     i1l910:	
   549                           
   550                           ;main.c: 56:     if(INTE && INTF){
   551  001D  1E0B               	btfss	11,4	;volatile
   552  001E  2820               	goto	u8_21
   553  001F  2821               	goto	u8_20
   554  0020                     u8_21:	
   555  0020  2850               	goto	i1l928
   556  0021                     u8_20:	
   557  0021                     i1l912:	
   558  0021  1C8B               	btfss	11,1	;volatile
   559  0022  2824               	goto	u9_21
   560  0023  2825               	goto	u9_20
   561  0024                     u9_21:	
   562  0024  2850               	goto	i1l928
   563  0025                     u9_20:	
   564  0025                     i1l914:	
   565                           
   566                           ;main.c: 57:         ones++;
   567  0025  3001               	movlw	1
   568  0026  07F8               	addwf	_ones,f
   569  0027  1803               	skipnc
   570  0028  0AF9               	incf	_ones+1,f
   571  0029  3000               	movlw	0
   572  002A  07F9               	addwf	_ones+1,f
   573  002B                     i1l916:	
   574                           
   575                           ;main.c: 58:         if(ones > 9){
   576  002B  0879               	movf	_ones+1,w
   577  002C  3A80               	xorlw	128
   578  002D  00FF               	movwf	btemp+1
   579  002E  3080               	movlw	128
   580  002F  027F               	subwf	btemp+1,w
   581  0030  1D03               	skipz
   582  0031  2834               	goto	u10_25
   583  0032  300A               	movlw	10
   584  0033  0278               	subwf	_ones,w
   585  0034                     u10_25:	
   586  0034  1C03               	skipc
   587  0035  2837               	goto	u10_21
   588  0036  2838               	goto	u10_20
   589  0037                     u10_21:	
   590  0037  2840               	goto	i1l922
   591  0038                     u10_20:	
   592  0038                     i1l918:	
   593                           
   594                           ;main.c: 59:             tens++;
   595  0038  3001               	movlw	1
   596  0039  07F6               	addwf	_tens,f
   597  003A  1803               	skipnc
   598  003B  0AF7               	incf	_tens+1,f
   599  003C  3000               	movlw	0
   600  003D  07F7               	addwf	_tens+1,f
   601  003E                     i1l920:	
   602                           
   603                           ;main.c: 60:             ones = 0;
   604  003E  01F8               	clrf	_ones
   605  003F  01F9               	clrf	_ones+1
   606  0040                     i1l922:	
   607                           
   608                           ;main.c: 62:         if(tens > 9){
   609  0040  0877               	movf	_tens+1,w
   610  0041  3A80               	xorlw	128
   611  0042  00FF               	movwf	btemp+1
   612  0043  3080               	movlw	128
   613  0044  027F               	subwf	btemp+1,w
   614  0045  1D03               	skipz
   615  0046  2849               	goto	u11_25
   616  0047  300A               	movlw	10
   617  0048  0276               	subwf	_tens,w
   618  0049                     u11_25:	
   619  0049  1C03               	skipc
   620  004A  284C               	goto	u11_21
   621  004B  284D               	goto	u11_20
   622  004C                     u11_21:	
   623  004C  284F               	goto	i1l926
   624  004D                     u11_20:	
   625  004D                     i1l924:	
   626                           
   627                           ;main.c: 63:             tens = 0;
   628  004D  01F6               	clrf	_tens
   629  004E  01F7               	clrf	_tens+1
   630  004F                     i1l926:	
   631                           
   632                           ;main.c: 66:         INTF = 0;
   633  004F  108B               	bcf	11,1	;volatile
   634  0050                     i1l928:	
   635                           
   636                           ;main.c: 68:     if(T0IE && T0IF){
   637  0050  1E8B               	btfss	11,5	;volatile
   638  0051  2853               	goto	u12_21
   639  0052  2854               	goto	u12_20
   640  0053                     u12_21:	
   641  0053  287C               	goto	i1l66
   642  0054                     u12_20:	
   643  0054                     i1l930:	
   644  0054  1D0B               	btfss	11,2	;volatile
   645  0055  2857               	goto	u13_21
   646  0056  2858               	goto	u13_20
   647  0057                     u13_21:	
   648  0057  287C               	goto	i1l66
   649  0058                     u13_20:	
   650  0058                     i1l932:	
   651                           
   652                           ;main.c: 69:         if(RC0 == 1){
   653  0058  1283               	bcf	3,5	;RP0=0, select bank0
   654  0059  1303               	bcf	3,6	;RP1=0, select bank0
   655  005A  1C07               	btfss	7,0	;volatile
   656  005B  285D               	goto	u14_21
   657  005C  285E               	goto	u14_20
   658  005D                     u14_21:	
   659  005D  286D               	goto	i1l64
   660  005E                     u14_20:	
   661  005E                     i1l934:	
   662                           
   663                           ;main.c: 70:             RC0 = 0;
   664  005E  1007               	bcf	7,0	;volatile
   665                           
   666                           ;main.c: 71:             RC1 = 1;
   667  005F  1487               	bsf	7,1	;volatile
   668  0060                     i1l936:	
   669                           
   670                           ;main.c: 72:             PORTD = numberToSegment(tens);
   671  0060  0877               	movf	_tens+1,w
   672  0061  00F1               	movwf	numberToSegment@number+1
   673  0062  0876               	movf	_tens,w
   674  0063  00F0               	movwf	numberToSegment@number
   675  0064  120A  118A  2089  120A  118A  	fcall	_numberToSegment
   676  0069  1283               	bcf	3,5	;RP0=0, select bank0
   677  006A  1303               	bcf	3,6	;RP1=0, select bank0
   678  006B  0088               	movwf	8	;volatile
   679                           
   680                           ;main.c: 73:         }else{
   681  006C  287B               	goto	i1l940
   682  006D                     i1l64:	
   683                           
   684                           ;main.c: 74:             RC0 = 1;
   685  006D  1407               	bsf	7,0	;volatile
   686                           
   687                           ;main.c: 75:             RC1 = 0;
   688  006E  1087               	bcf	7,1	;volatile
   689  006F                     i1l938:	
   690                           
   691                           ;main.c: 76:             PORTD = numberToSegment(ones);
   692  006F  0879               	movf	_ones+1,w
   693  0070  00F1               	movwf	numberToSegment@number+1
   694  0071  0878               	movf	_ones,w
   695  0072  00F0               	movwf	numberToSegment@number
   696  0073  120A  118A  2089  120A  118A  	fcall	_numberToSegment
   697  0078  1283               	bcf	3,5	;RP0=0, select bank0
   698  0079  1303               	bcf	3,6	;RP1=0, select bank0
   699  007A  0088               	movwf	8	;volatile
   700  007B                     i1l940:	
   701                           
   702                           ;main.c: 79:         T0IF = 0;
   703  007B  110B               	bcf	11,2	;volatile
   704  007C                     i1l66:	
   705  007C  0875               	movf	??_ISR+3,w
   706  007D  1283               	bcf	3,5	;RP0=0, select bank0
   707  007E  1303               	bcf	3,6	;RP1=0, select bank0
   708  007F  00FF               	movwf	btemp+1
   709  0080  0874               	movf	??_ISR+2,w
   710  0081  008A               	movwf	10
   711  0082  0873               	movf	??_ISR+1,w
   712  0083  0084               	movwf	4
   713  0084  0E72               	swapf	??_ISR^(0+4294967168),w
   714  0085  0083               	movwf	3
   715  0086  0EFE               	swapf	btemp,f
   716  0087  0E7E               	swapf	btemp,w
   717  0088  0009               	retfie
   718  0089                     __end_of_ISR:	
   719                           
   720                           	psect	intentry
   721  0004                     __pintentry:	
   722                           ;incstack = 0
   723                           ; Regs used in _ISR: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   724                           
   725  0004                     interrupt_function:	
   726  007E                     saved_w	set	btemp
   727  0004  00FE               	movwf	btemp
   728  0005  0E03               	swapf	3,w
   729  0006  00F2               	movwf	??_ISR
   730  0007  0804               	movf	4,w
   731  0008  00F3               	movwf	??_ISR+1
   732  0009  080A               	movf	10,w
   733  000A  00F4               	movwf	??_ISR+2
   734  000B  1283               	bcf	3,5	;RP0=0, select bank0
   735  000C  1303               	bcf	3,6	;RP1=0, select bank0
   736  000D  087F               	movf	btemp+1,w
   737  000E  00F5               	movwf	??_ISR+3
   738  000F  120A  118A  281D   	ljmp	_ISR
   739                           
   740                           	psect	text5
   741  0089                     __ptext5:	
   742 ;; *************** function _numberToSegment *****************
   743 ;; Defined at:
   744 ;;		line 85 in file "main.c"
   745 ;; Parameters:    Size  Location     Type
   746 ;;  number          2    0[COMMON] int 
   747 ;; Auto vars:     Size  Location     Type
   748 ;;		None
   749 ;; Return value:  Size  Location     Type
   750 ;;                  1    wreg      unsigned char 
   751 ;; Registers used:
   752 ;;		wreg, fsr0l, fsr0h, status,2, status,0
   753 ;; Tracked objects:
   754 ;;		On entry : 0/0
   755 ;;		On exit  : 0/0
   756 ;;		Unchanged: 0/0
   757 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   758 ;;      Params:         2       0       0       0       0
   759 ;;      Locals:         0       0       0       0       0
   760 ;;      Temps:          0       0       0       0       0
   761 ;;      Totals:         2       0       0       0       0
   762 ;;Total ram usage:        2 bytes
   763 ;; Hardware stack levels used:    1
   764 ;; This function calls:
   765 ;;		Nothing
   766 ;; This function is called by:
   767 ;;		_ISR
   768 ;; This function uses a non-reentrant model
   769 ;;
   770                           
   771                           
   772                           ;psect for function _numberToSegment
   773  0089                     _numberToSegment:	
   774  0089                     i1l828:	
   775                           ;incstack = 0
   776                           ; Regs used in _numberToSegment: [wreg-fsr0h+status,2+status,0]
   777                           
   778                           
   779                           ;main.c: 86:     switch(number){
   780  0089  289E               	goto	i1l898
   781  008A                     i1l830:	
   782                           
   783                           ;main.c: 88:           return 0b00111111;
   784  008A  303F               	movlw	63
   785  008B  28C3               	goto	i1l71
   786  008C                     i1l836:	
   787                           
   788                           ;main.c: 91:           return 0b00000110;
   789  008C  3006               	movlw	6
   790  008D  28C3               	goto	i1l71
   791  008E                     i1l842:	
   792                           
   793                           ;main.c: 94:           return 0b01011011;
   794  008E  305B               	movlw	91
   795  008F  28C3               	goto	i1l71
   796  0090                     i1l848:	
   797                           
   798                           ;main.c: 97:           return 0b01001111;
   799  0090  304F               	movlw	79
   800  0091  28C3               	goto	i1l71
   801  0092                     i1l854:	
   802                           
   803                           ;main.c: 100:           return 0b01100110;
   804  0092  3066               	movlw	102
   805  0093  28C3               	goto	i1l71
   806  0094                     i1l860:	
   807                           
   808                           ;main.c: 103:           return 0b01101101;
   809  0094  306D               	movlw	109
   810  0095  28C3               	goto	i1l71
   811  0096                     i1l866:	
   812                           
   813                           ;main.c: 106:           return 0b01111101;
   814  0096  307D               	movlw	125
   815  0097  28C3               	goto	i1l71
   816  0098                     i1l872:	
   817                           
   818                           ;main.c: 109:           return 0b00000111;
   819  0098  3007               	movlw	7
   820  0099  28C3               	goto	i1l71
   821  009A                     i1l878:	
   822                           
   823                           ;main.c: 112:           return 0b01111111;
   824  009A  307F               	movlw	127
   825  009B  28C3               	goto	i1l71
   826  009C                     i1l884:	
   827                           
   828                           ;main.c: 115:           return 0b01101111;
   829  009C  306F               	movlw	111
   830  009D  28C3               	goto	i1l71
   831  009E                     i1l898:	
   832                           
   833                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   834                           ; Switch size 1, requested type "simple"
   835                           ; Number of cases is 1, Range of values is 0 to 0
   836                           ; switch strategies available:
   837                           ; Name         Instructions Cycles
   838                           ; simple_byte            4     3 (average)
   839                           ; direct_byte           11     8 (fixed)
   840                           ; jumptable            260     6 (fixed)
   841                           ;	Chosen strategy is simple_byte
   842  009E  0871               	movf	numberToSegment@number+1,w
   843  009F  3A00               	xorlw	0	; case 0
   844  00A0  1903               	skipnz
   845  00A1  28A3               	goto	i1l1002
   846  00A2  288A               	goto	i1l830
   847  00A3                     i1l1002:	
   848                           
   849                           ; Switch size 1, requested type "simple"
   850                           ; Number of cases is 10, Range of values is 0 to 9
   851                           ; switch strategies available:
   852                           ; Name         Instructions Cycles
   853                           ; simple_byte           31    16 (average)
   854                           ; direct_byte           38     8 (fixed)
   855                           ; jumptable            260     6 (fixed)
   856                           ;	Chosen strategy is simple_byte
   857  00A3  0870               	movf	numberToSegment@number,w
   858  00A4  3A00               	xorlw	0	; case 0
   859  00A5  1903               	skipnz
   860  00A6  288A               	goto	i1l830
   861  00A7  3A01               	xorlw	1	; case 1
   862  00A8  1903               	skipnz
   863  00A9  288C               	goto	i1l836
   864  00AA  3A03               	xorlw	3	; case 2
   865  00AB  1903               	skipnz
   866  00AC  288E               	goto	i1l842
   867  00AD  3A01               	xorlw	1	; case 3
   868  00AE  1903               	skipnz
   869  00AF  2890               	goto	i1l848
   870  00B0  3A07               	xorlw	7	; case 4
   871  00B1  1903               	skipnz
   872  00B2  2892               	goto	i1l854
   873  00B3  3A01               	xorlw	1	; case 5
   874  00B4  1903               	skipnz
   875  00B5  2894               	goto	i1l860
   876  00B6  3A03               	xorlw	3	; case 6
   877  00B7  1903               	skipnz
   878  00B8  2896               	goto	i1l866
   879  00B9  3A01               	xorlw	1	; case 7
   880  00BA  1903               	skipnz
   881  00BB  2898               	goto	i1l872
   882  00BC  3A0F               	xorlw	15	; case 8
   883  00BD  1903               	skipnz
   884  00BE  289A               	goto	i1l878
   885  00BF  3A01               	xorlw	1	; case 9
   886  00C0  1903               	skipnz
   887  00C1  289C               	goto	i1l884
   888  00C2  288A               	goto	i1l830
   889  00C3                     i1l71:	
   890  00C3  0008               	return
   891  00C4                     __end_of_numberToSegment:	
   892  007E                     btemp	set	126	;btemp
   893  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         4
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      10
    BANK0            80      4       4
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_numberToSegment

Critical Paths under _main in BANK0

    _main->_enableTmrInterrupt

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0     155
                 _enableExtInterrupt
                 _enableTmrInterrupt
                         _setupPorts
 ---------------------------------------------------------------------------------
 (1) _setupPorts                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _enableTmrInterrupt                                   4     2      2     155
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) _enableExtInterrupt                                   0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _ISR                                                  4     4      0     174
                                              2 COMMON     4     4      0
                    _numberToSegment
 ---------------------------------------------------------------------------------
 (3) _numberToSegment                                      2     0      2     174
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _enableExtInterrupt
   _enableTmrInterrupt
   _setupPorts

 _ISR (ROOT)
   _numberToSegment

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      6       A       1       71.4%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       E       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      4       4       5        5.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       E      12        0.0%


Microchip Technology PIC Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Fri Oct 02 20:14:12 2020

                         l43 00D9                           l52 00F0                           l44 00D9  
                         l55 00F7                           l49 00FA            ??_numberToSegment 0072  
                        l970 00E7                          l964 00F8                          l972 00F1  
                        l980 00D4                          l966 00DD                          l974 00F6  
                        l968 00DF                          l976 00C4                          l978 00C9  
                        _GIE 005F                          _RC0 0038                          _RC1 0039  
                        _ISR 001D                          fsr0 0004                         ?_ISR 0070  
                       _T0IE 005D                         _T0IF 005A                         _INTE 005C  
                       _INTF 0059                         i1l71 00C3                         i1l64 006D  
                       i1l66 007C                         u8_20 0021                         u8_21 0020  
                       u9_20 0025                         u9_21 0024                         _main 00C4  
__size_of_enableTmrInterrupt 0014                         _ones 0078                         _tens 0076  
                       btemp 007E                         start 0012   __end_of_enableExtInterrupt 00FB  
                      ??_ISR 0072                        ?_main 0070                        i1l830 008A  
                      i1l910 001D                        i1l920 003E                        i1l912 0021  
                      i1l842 008E                        i1l930 0054                        i1l922 0040  
                      i1l914 0025                        i1l860 0094                        i1l836 008C  
                      i1l828 0089                        i1l940 007B                        i1l932 0058  
                      i1l924 004D                        i1l916 002B                        i1l854 0092  
                      i1l934 005E                        i1l926 004F                        i1l918 0038  
                      i1l872 0098                        i1l848 0090                        i1l936 0060  
                      i1l928 0050                        i1l866 0096                        i1l938 006F  
                      i1l884 009C                        i1l878 009A                        i1l898 009E  
                      u10_20 0038                        u10_21 0037                        u10_25 0034  
                      u11_20 004D                        u11_21 004C                        u11_25 0049  
                      u12_20 0054                        u12_21 0053                        u13_20 0058  
                      u13_21 0057                        u14_20 005E                        u14_21 005D  
                      _PORTD 0008                        _TRISD 0088                        pclath 000A  
                      status 0003                        wtemp0 007E              __initialization 0015  
               __end_of_main 00DD                       ??_main 0024                       i1l1002 00A3  
                     _TRISB0 0430                       _TRISC0 0438                       _TRISC1 0439  
                     saved_w 007E      __end_of__initialization 0019              _numberToSegment 0089  
             __pcstackCOMMON 0070                   __pmaintext 00C4                   __pintentry 0004  
 enableTmrInterrupt@prescale 0020           _enableExtInterrupt 00F8      __end_of_numberToSegment 00C4  
 __end_of_enableTmrInterrupt 00F1          ?_enableExtInterrupt 0070         ??_enableExtInterrupt 0020  
                    __ptext1 00F1                      __ptext2 00DD                      __ptext3 00F8  
                    __ptext4 001D                      __ptext5 0089                 __size_of_ISR 006C  
       end_of_initialization 0019                   _setupPorts 00F1             ?_numberToSegment 0070  
        start_initialization 0015                  __end_of_ISR 0089                  ?_setupPorts 0070  
                __pbssCOMMON 0076                    ___latbits 0002                __pcstackBANK0 0020  
         _enableTmrInterrupt 00DD          ?_enableTmrInterrupt 0020            interrupt_function 0004  
       ??_enableTmrInterrupt 0022       enableTmrInterrupt@mask 0022          __size_of_setupPorts 0007  
__size_of_enableExtInterrupt 0003                __size_of_main 0019     __size_of_numberToSegment 003B  
               ??_setupPorts 0020                     intlevel1 0000           __end_of_setupPorts 00F8  
      numberToSegment@number 0070                   _OPTION_REG 0081  
